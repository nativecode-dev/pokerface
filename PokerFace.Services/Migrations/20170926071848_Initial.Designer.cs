// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using PokerFace.Services.Data;
using PokerFace.Services.Data.Poker;
using System;

namespace PokerFace.Services.Migrations
{
    [DbContext(typeof(PokerFaceDataContext))]
    [Migration("20170926071848_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn)
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452");

            modelBuilder.Entity("PokerFace.Services.Data.Poker.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset?>("DateCreated");

                    b.Property<DateTimeOffset?>("DateModified");

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("ShortIdentifier")
                        .HasMaxLength(32);

                    b.Property<int>("State");

                    b.HasKey("Id");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("PokerFace.Services.Data.Poker.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset?>("DateCreated");

                    b.Property<DateTimeOffset?>("DateModified");

                    b.Property<Guid>("GameId");

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("Player");
                });

            modelBuilder.Entity("PokerFace.Services.Data.Poker.PlayerHand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset?>("DateCreated");

                    b.Property<DateTimeOffset?>("DateModified");

                    b.Property<Guid>("PlayerId");

                    b.Property<Guid>("RoundId");

                    b.Property<short>("StoryPoints");

                    b.HasKey("Id");

                    b.HasIndex("RoundId");

                    b.ToTable("PlayerHand");
                });

            modelBuilder.Entity("PokerFace.Services.Data.Poker.Round", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset?>("DateCreated");

                    b.Property<DateTimeOffset?>("DateModified");

                    b.Property<Guid>("GameId");

                    b.Property<short>("Number");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("Round");
                });

            modelBuilder.Entity("PokerFace.Services.Data.Poker.Player", b =>
                {
                    b.HasOne("PokerFace.Services.Data.Poker.Game", "Game")
                        .WithMany("Players")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PokerFace.Services.Data.Poker.PlayerHand", b =>
                {
                    b.HasOne("PokerFace.Services.Data.Poker.Round")
                        .WithMany("Hands")
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PokerFace.Services.Data.Poker.Round", b =>
                {
                    b.HasOne("PokerFace.Services.Data.Poker.Game", "Game")
                        .WithMany("Rounds")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
